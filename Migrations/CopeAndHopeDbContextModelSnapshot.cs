// <auto-generated />
using System;
using CopeAndHope.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CopeAndHope.Migrations
{
    [DbContext(typeof(CopeAndHopeDbContext))]
    partial class CopeAndHopeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CopeAndHope.Models.CopeEmotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CopeJournalId")
                        .HasColumnType("integer");

                    b.Property<int>("EmotionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CopeJournalId");

                    b.HasIndex("EmotionId");

                    b.ToTable("CopeEmotions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CopeJournalId = 1,
                            EmotionId = 1
                        },
                        new
                        {
                            Id = 2,
                            CopeJournalId = 2,
                            EmotionId = 2
                        });
                });

            modelBuilder.Entity("CopeAndHope.Models.CopeJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CopeStrategyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("JournalDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("JournalText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CopeStrategyId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("CopeJournals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CopeStrategyId = 3,
                            JournalDate = new DateTime(2023, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JournalText = "This strategy was a tough one for me to implement...",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 2,
                            CopeStrategyId = 6,
                            JournalDate = new DateTime(2023, 10, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JournalText = "This strategy was easier for me to implement...",
                            UserProfileId = 1
                        });
                });

            modelBuilder.Entity("CopeAndHope.Models.CopeStrategy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CopeStrategyText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CopeStrategies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CopeStrategyText = "Example Coping Strategy 1"
                        },
                        new
                        {
                            Id = 2,
                            CopeStrategyText = "Example Coping Strategy 2"
                        },
                        new
                        {
                            Id = 3,
                            CopeStrategyText = "Example Coping Strategy 3"
                        },
                        new
                        {
                            Id = 4,
                            CopeStrategyText = "Example Coping Strategy 4"
                        },
                        new
                        {
                            Id = 5,
                            CopeStrategyText = "Example Coping Strategy 5"
                        },
                        new
                        {
                            Id = 6,
                            CopeStrategyText = "Example Coping Strategy 6"
                        },
                        new
                        {
                            Id = 7,
                            CopeStrategyText = "Example Coping Strategy 7"
                        },
                        new
                        {
                            Id = 8,
                            CopeStrategyText = "Example Coping Strategy 8"
                        },
                        new
                        {
                            Id = 9,
                            CopeStrategyText = "Example Coping Strategy 9"
                        },
                        new
                        {
                            Id = 10,
                            CopeStrategyText = "Example Coping Strategy 10"
                        },
                        new
                        {
                            Id = 11,
                            CopeStrategyText = "Example Coping Strategy 11"
                        },
                        new
                        {
                            Id = 12,
                            CopeStrategyText = "Example Coping Strategy 12"
                        },
                        new
                        {
                            Id = 13,
                            CopeStrategyText = "Example Coping Strategy 13"
                        },
                        new
                        {
                            Id = 14,
                            CopeStrategyText = "Example Coping Strategy 14"
                        },
                        new
                        {
                            Id = 15,
                            CopeStrategyText = "Example Coping Strategy 15"
                        },
                        new
                        {
                            Id = 16,
                            CopeStrategyText = "Example Coping Strategy 16"
                        },
                        new
                        {
                            Id = 17,
                            CopeStrategyText = "Example Coping Strategy 17"
                        },
                        new
                        {
                            Id = 18,
                            CopeStrategyText = "Example Coping Strategy 18"
                        },
                        new
                        {
                            Id = 19,
                            CopeStrategyText = "Example Coping Strategy 19"
                        },
                        new
                        {
                            Id = 20,
                            CopeStrategyText = "Example Coping Strategy 20"
                        },
                        new
                        {
                            Id = 21,
                            CopeStrategyText = "Example Coping Strategy 21"
                        },
                        new
                        {
                            Id = 22,
                            CopeStrategyText = "Example Coping Strategy 22"
                        },
                        new
                        {
                            Id = 23,
                            CopeStrategyText = "Example Coping Strategy 23"
                        },
                        new
                        {
                            Id = 24,
                            CopeStrategyText = "Example Coping Strategy 24"
                        },
                        new
                        {
                            Id = 25,
                            CopeStrategyText = "Example Coping Strategy 25"
                        },
                        new
                        {
                            Id = 26,
                            CopeStrategyText = "Example Coping Strategy 26"
                        },
                        new
                        {
                            Id = 27,
                            CopeStrategyText = "Example Coping Strategy 27"
                        },
                        new
                        {
                            Id = 28,
                            CopeStrategyText = "Example Coping Strategy 28"
                        },
                        new
                        {
                            Id = 29,
                            CopeStrategyText = "Example Coping Strategy 29"
                        },
                        new
                        {
                            Id = 30,
                            CopeStrategyText = "Example Coping Strategy 30"
                        },
                        new
                        {
                            Id = 31,
                            CopeStrategyText = "Example Coping Strategy 31"
                        });
                });

            modelBuilder.Entity("CopeAndHope.Models.Emotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("EmotionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Emotions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmotionName = "Hopeful"
                        },
                        new
                        {
                            Id = 2,
                            EmotionName = "Empowered"
                        },
                        new
                        {
                            Id = 3,
                            EmotionName = "Optimistic"
                        },
                        new
                        {
                            Id = 4,
                            EmotionName = "Calm"
                        },
                        new
                        {
                            Id = 5,
                            EmotionName = "Gracious"
                        },
                        new
                        {
                            Id = 6,
                            EmotionName = "Joyful"
                        });
                });

            modelBuilder.Entity("CopeAndHope.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Admina",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            LastName = "Strator"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Ryan",
                            IdentityUserId = "d8d76512-74f1-43bb-b1fd-87d3a8aa36df",
                            LastName = "Mathis"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Ethan",
                            IdentityUserId = "a7d21fac-3b21-454a-a747-075f072d0cf3",
                            LastName = "Mathis"
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "Simone",
                            IdentityUserId = "c806cfae-bda9-47c5-8473-dd52fd056a9b",
                            LastName = "Henderson"
                        },
                        new
                        {
                            Id = 5,
                            FirstName = "Bob",
                            IdentityUserId = "9ce89d88-75da-4a80-9b0d-3fe58582b8e2",
                            LastName = "Williams"
                        },
                        new
                        {
                            Id = 6,
                            FirstName = "Eve",
                            IdentityUserId = "d224a03d-bf0c-4a05-b728-e3521e45d74d",
                            LastName = "Davis"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            ConcurrencyStamp = "624785a9-a19a-4bf5-b370-fbf126d4335e",
                            Name = "Admin",
                            NormalizedName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f54ec6a8-ee6c-4c2b-b984-6e109791c009",
                            Email = "admina@strator.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEBW774jiC8H9LesszKOoF10330wdVdfllXIbbM/SqO7mIcNmjhCtwJUuGRH2/DZHIg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "79215fd3-c300-41a4-a196-ad9d15b47257",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "d8d76512-74f1-43bb-b1fd-87d3a8aa36df",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bbcfb2c4-3163-4df8-8d98-f9bbd7bcfbcb",
                            Email = "ryan@mathis.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEOVjWJ6+FNBbw1UMojlwhyzirEpBx1tuci/2uWrQsCiqI5MdJBCLS/0CX7XZQUfRig==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "552464ea-3465-4812-a15c-b15793469b62",
                            TwoFactorEnabled = false,
                            UserName = "RyanMathis"
                        },
                        new
                        {
                            Id = "a7d21fac-3b21-454a-a747-075f072d0cf3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ff3855ba-bdcc-4f9d-abc4-636e158dd194",
                            Email = "ethan@mathis.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAED+qnoXxFVh/QrrPSqMO5rsNGrOKEglK2LazXqCrKV2s+Jif4nnD3bLiPvKX9klGEw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "84fc1e76-b8c9-4b03-80ef-3d7204d20079",
                            TwoFactorEnabled = false,
                            UserName = "EthanMathis"
                        },
                        new
                        {
                            Id = "c806cfae-bda9-47c5-8473-dd52fd056a9b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f46669d5-e396-41e1-83a7-40b9117af73c",
                            Email = "simone@henderson.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEHPDxFlUNdVmf6EW+TuF1XRKO3vkc9tTujqbWHqxB9P9mc64ohVZjK30fMKz8i62Ag==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b9417a2c-0e2d-4007-9b9f-3f7f23faf526",
                            TwoFactorEnabled = false,
                            UserName = "SimoneHenderson"
                        },
                        new
                        {
                            Id = "9ce89d88-75da-4a80-9b0d-3fe58582b8e2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fa2bddf0-b4dd-455f-b857-8348e4aa4e47",
                            Email = "bob@williams.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAED2TqIRFv3LohwJ6wqSZ5Y4bU0cuc8sFgOmIXGh7cx86UIB0zpleSqqcRyrJTQTYsQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "26981ff0-cb06-444a-ad9c-09143674f972",
                            TwoFactorEnabled = false,
                            UserName = "BobWilliams"
                        },
                        new
                        {
                            Id = "d224a03d-bf0c-4a05-b728-e3521e45d74d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "82198de3-da80-4ff1-a255-8b5caa99b50a",
                            Email = "Eve@Davis.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAECKbGVO00A8O3V/gqee5ND9qHzXVYDUt8e6OrfhnT5WELIApioM7VTGACm/QO4NFIQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0c20b933-f7bc-43c3-8f06-49f0248082ed",
                            TwoFactorEnabled = false,
                            UserName = "EveDavis"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "d8d76512-74f1-43bb-b1fd-87d3a8aa36df",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CopeAndHope.Models.CopeEmotion", b =>
                {
                    b.HasOne("CopeAndHope.Models.CopeJournal", "CopeJournal")
                        .WithMany()
                        .HasForeignKey("CopeJournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CopeAndHope.Models.Emotion", "Emotion")
                        .WithMany()
                        .HasForeignKey("EmotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CopeJournal");

                    b.Navigation("Emotion");
                });

            modelBuilder.Entity("CopeAndHope.Models.CopeJournal", b =>
                {
                    b.HasOne("CopeAndHope.Models.CopeStrategy", "CopeStrategy")
                        .WithMany("CopeJournals")
                        .HasForeignKey("CopeStrategyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CopeAndHope.Models.UserProfile", "UserProfile")
                        .WithMany("CopeJournals")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CopeStrategy");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("CopeAndHope.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CopeAndHope.Models.CopeStrategy", b =>
                {
                    b.Navigation("CopeJournals");
                });

            modelBuilder.Entity("CopeAndHope.Models.UserProfile", b =>
                {
                    b.Navigation("CopeJournals");
                });
#pragma warning restore 612, 618
        }
    }
}
